# -*- coding: utf-8 -*-
"""Rock vs Mine Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NBZ8p1PZ6mu5iEVue9KumGv2pa8aKVBc

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and data processing """

# Loading the dataset into a pandas dataframe
sonar_data = pd.read_csv('/content/Copy of sonar data.csv', header=None)

# This will show us first five row of the data
sonar_data.head()

# Total number of rows and columns in the data
sonar_data.shape

# To get a statistical measures of the data
sonar_data.describe()

"""M represents Mine
R represents Rock
"""

# To get the total count of rock and mine
sonar_data[60].value_counts()

sonar_data.groupby(60).mean()

# Separating data and labels (Supervised learning)
X = sonar_data.drop(columns=60, axis=1) # If it was rows then axis was 0
Y = sonar_data[60]

print(X)
print(Y)

"""Training and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, stratify=Y, random_state=1)

print(X.shape, X_train.shape, X_test.shape)

print(X_train)
print(Y_train)

"""Training model with Logistic regression"""

model = LogisticRegression()

# Training the logistic regression model with training data
model.fit(X_train, Y_train)

"""Model evaluation """

# Accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data: ', training_data_accuracy)

# Accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on test data: ', test_data_accuracy)

"""Making a predictive system"""

input_data = (0.0100,0.0275,0.0190,0.0371,0.0416,0.0201,0.0314,0.0651,0.1896,0.2668,0.3376,0.3282,0.2432,0.1268,0.1278,0.4441,0.6795,0.7051,0.7966,0.9401,0.9857,0.8193,0.5789,0.6394,0.7043,0.6875,0.4081,0.1811,0.2064,0.3917,0.3791,0.2042,0.2227,0.3341,0.3984,0.5077,0.5534,0.3352,0.2723,0.2278,0.2044,0.1986,0.0835,0.0908,0.1380,0.1948,0.1211,0.0843,0.0589,0.0247,0.0118,0.0088,0.0104,0.0036,0.0088,0.0047,0.0117,0.0020,0.0091,0.0058)

# Changing the input_data into a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshape the np array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]=='R'):
  print('The object is a Rock')
else:
  print('The object is a mine')